#pragma once

class GameObject;
class Texture;
class Light
{
public:
	// 빛 위치와 방향에서의 변환 행렬 (전치 행렬이 되어 있음!!)
	XMFLOAT4X4 viewTransform;
	XMFLOAT4X4 projectionTransform;
	// 각 항들
	XMFLOAT4 ambient;
	XMFLOAT4 diffuse;
	XMFLOAT4 specular;

	XMFLOAT3 position;
	float range;

	XMFLOAT3 offset;	// 빛을 내는 물체의 중심으로부터 떨어진 값
	float theta; // 외부 원을 그리는 각, 스포트라이트에서 사용
	XMFLOAT3 attenuation;
	float phi; // 내부 원을 그리는 각, 스포트라이트에서 사용
	XMFLOAT3 direction;
	float falloff;	// phi와 theta에 대한 감쇠 비율
private:
	weak_ptr<GameObject> object;
public:
	// 1 = 점, 2 = 스포트, 3 = 직접
	int lightType;

	// 이 빛이 켜져있는 상태인지 확인
	bool enable;

	D3D12_CPU_DESCRIPTOR_HANDLE bakedShadowMapCPUDescriptorHandle;
	shared_ptr<Texture> pBakedShadowMap;
	
public:
	Light(const shared_ptr<GameObject>& _object = nullptr);
	~Light();
	void UpdateLight();

	void SetBakedShadowMap(shared_ptr<Texture> _pTexture, D3D12_CPU_DESCRIPTOR_HANDLE _handle);

	void UpdateComputeShaderVariable(const ComPtr<ID3D12GraphicsCommandList>& _pCommandList);

	void UpdateViewTransform();
	void UpdateProjectionTransform(float _nearDistance, float _farDistance, float _aspectRatio, float _fovAngle);
};


struct LightsMappedFormat {
	array<Light, MAX_LIGHTS> lights;
	XMFLOAT4 globalAmbient;
	int nLight;
};